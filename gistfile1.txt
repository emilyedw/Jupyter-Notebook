{
 "metadata": {
  "name": "Word Counts"
 }, 
 "name": "Word Counts", 
 "nbformat": 2, 
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown", 
     "source": "Do men and women come up in different contexts in the newspaper? One quick way to answer that questions\nis to compare the words in sentences that discuss women with the words in sentences that\ndiscuss men. Here's an example of how to do this sort of work using Python. \n\nThe data comes from last week's (February 27 2013-March 6, 2013) New York Times. I downloaded\nall the articles available through LexisNexis except for the corrections and paid\nobituaries. Using a modfied version of a old Python \n[script](http://nealcaren.web.unc.edu/cleaning-up-lexisnexis-files/), I removed all the\nmetadata and put the text\nof each article in its own file and placed all of them in a folder called articles. \nIt is not the most efficient way to go about it, but sometimes the text data comes that way\nso I thought I would be useful to set it up that way for didactic purposes. "
    }, 
    {
     "cell_type": "markdown", 
     "source": "First we want to load a few modules. \nThe only one that you might need to download is [nltk](http://nltk.org),\nwhich is a powerful suite for text processing. \nI just use the part that splits text by sentences. Glob is a module that is useful for\nretrieving the contents of a directory, and string.punctuation is string with all the \nASCII punctuation marks. "
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": "from __future__ import division\n\nimport glob\nimport nltk\nfrom string import punctuation\n\ntokenizer = nltk.data.load('tokenizers/punkt/english.pickle')", 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 30
    }, 
    {
     "cell_type": "markdown", 
     "source": "The heart of the analysis will be figuring out whether a sentence is talking about\na man or woman. For this analysis, I'm going to assume that the sentence is probably talking about man if it uses\nwords like, \"he\", \"dad\" or \"Mr.\", and is probably talking about a woman if it uses\nwords like, \"she\", \"mother\", or \"Ms.\". It isn't perfect, but depending on the text, it can be quite useful.\nRather than start from scratch, I build off of  Danielle Sucher's list from her \n[Jailbreak the Patriarchy](https://github.com/DanielleSucher/Jailbreak-the-Patriarchy)\nbrowser plugin.\n"
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": "#Two lists  of words that are used when a man or woman is present, based on Danielle Sucher's https://github.com/DanielleSucher/Jailbreak-the-Patriarchy\nmale_words=set(['guy','spokesman','chairman',\"men's\",'men','him',\"he's\",'his','boy','boyfriend','boyfriends','boys','brother','brothers','dad','dads','dude','father','fathers','fiance','gentleman','gentlemen','god','grandfather','grandpa','grandson','groom','he','himself','husband','husbands','king','male','man','mr','nephew','nephews','priest','prince','son','sons','uncle','uncles','waiter','widower','widowers'])\nfemale_words=set(['heroine','spokeswpman','chairwoman',\"women's\",'actress','women',\"she's\",'her','aunt','aunts','bride','daughter','daughters','female','fiancee','girl','girlfriend','girlfriends','girls','goddess','granddaughter','grandma','grandmother','herself','ladies','lady','lady','mom','moms','mother','mothers','mrs','ms','niece','nieces','priestess','princess','queens','she','sister','sisters','waitress','widow','widows','wife','wives','woman'])", 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 31
    }, 
    {
     "cell_type": "markdown", 
     "source": "I'm storing them as sets rather than lists because later on I want to look at words in\na sentence overlap with the words in these lists using the set overlap, as in the \nfollowing function, which takes a work list and returns the gender of the person\nbeing talked about, if any, based on the number of words a sentence has in common\nwith either the male or female word lists."
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": "def gender_the_sentence(sentence_words):\n    mw_length=len(male_words.intersection(sentence_words))\n    fw_length=len(female_words.intersection(sentence_words))\n\n    if mw_length>0 and fw_length==0:\n        gender='male'\n    elif mw_length==0 and fw_length>0: \n        gender='female'\n    elif mw_length>0 and fw_length>0: \n        gender='both'\n    else:\n        gender='none'\n    return gender", 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 32
    }, 
    {
     "cell_type": "markdown", 
     "source": "I don't really care about proper nouns, so I need a way to identify them. "
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": "def is_it_proper(word):\n        if word[0]==word[0].upper():\n            case='upper'\n        else:\n            case='lower'\n        \n        word_lower=word.lower()\n        try:\n            proper_nouns[word_lower][case]= proper_nouns[word_lower].get(case,0)+1\n        except Exception,e:\n            #This is triggered when the word hasn't been seen yet\n            proper_nouns[word_lower]= {case:1}", 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 33
    }, 
    {
     "cell_type": "markdown", 
     "source": "I'm going to keep track of each the words in each sentence with a couple of counters."
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": "def increment_gender(sentence_words,gender):\n    sentence_counter[gender]+=1\n    word_counter[gender]+=len(sentence_words)\n    for word in sentence_words:\n        word_freq[gender][word]=word_freq[gender].get(word,0)+1", 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 34
    }, 
    {
     "cell_type": "markdown", 
     "source": "And so we begin. I set up the counters to store the various quantities of interest."
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": "sentence_counter={'male':0,'female':0,'none':0,'both':0}\nword_counter={'male':0,'female':0,'both':0,'none':0}\nword_freq={'male':{},'female':{},'none':{},'both':{}}\nproper_nouns={}", 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 35
    }, 
    {
     "cell_type": "markdown", 
     "source": "I've stored all the files at text files in a directory called articles and I wanted to grab all their names."
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": "file_list=glob.glob('articles/*.txt')", 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 36
    }, 
    {
     "cell_type": "markdown", 
     "source": "The basic idea is to read each file, split it into senteences, and then process each sentence.\nThe processing begins by splitting the sentence into words and removing punctation. Then for each word\nthat doesn't begin the sentence, I figure out if it is capitalized or not as part of the \nhunt for proper nouns. Then, I estimate whether the sentence is likely talking about a man or a woman,\nbased on the occurences of the various gender lists. Finally, I add word that is used to the \napproriate gender word frquencies counter. So the sentence, \"She is lovely.\" would add 'she','is', and 'lovely'\nto our count of words used when talking about a female. It would also increment the lower case counters for\n'is' and 'lovely'."
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": "\nfor file_name in file_list:\n    #Open the file\n    text=open(file_name,'rb').read()\n    \n    #Split into sentences\n    sentences=tokenizer.tokenize(text)\n    \n    for sentence in sentences:\n        #word tokenize and strip punctuation\n            sentence_words=sentence.split()\n            sentence_words=[w.strip(punctuation) for w in sentence_words if len(w.strip(punctuation))>0]\n            \n            #figure out how often the word is capitalized\n            [is_it_proper(word) for word in sentence_words[1:]]\n            #lower case it\n            sentence_words=set([w.lower() for w in sentence_words])\n            \n            #Figure out if there are gendered words in the sentence by computing the length of the intersection of the sets\n            gender=gender_the_sentence(sentence_words)\n            \n            increment_gender(sentence_words,gender)\n            #Increment some counters", 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 37
    }, 
    {
     "cell_type": "markdown", 
     "source": "After each sentence is parsed, it is time to start analyzing the word frequencies.\n\nFirst, I create a set consisting of all words which were capitalized more often than not."
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": "proper_nouns=set([word for word in proper_nouns if  \n                  proper_nouns[word].get('upper',0) / \n                  (proper_nouns[word].get('upper',0)+proper_nouns[word].get('lower',0))>.50])", 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 38
    }, 
    {
     "cell_type": "markdown", 
     "source": "I don't really care about rare words, so I select the top 1,000 words, \nbased on frequencies, from both the male and female word dictionaries. From that list, \nI subtract the words used to identify the sentence as either male or female along with the proper nouns."
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": "common_words=set([w for w in sorted (word_freq['female'],key=word_freq['female'].get,reverse=True)[:1000]]+[w for w in sorted (word_freq['male'],key=word_freq['male'].get,reverse=True)[:1000]])\n\ncommon_words=list(common_words-male_words-female_words-proper_nouns)", 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 39
    }, 
    {
     "cell_type": "markdown", 
     "source": "I compute how likely the word appear in a male subject sentence versus a \nfemale subject sentence. My first instince was to create ratios, but they are undefined when\na word is not used to talk about the sex used in the denominator. I control for the fact\nthat there is likely an imbalalance in how many words are written about men and women. If 'hair' is \nmentioned in 10 male-subjected sentences and 10 female-subject sentences, that could be taken as a\nsign of parity, but not if there a total of 20 female-subject (50%) sentences and 100 male-subject\nsentences (10%)."
    }, 
    {
     "cell_type": "code", 
     "collapsed": true, 
     "input": "male_percent={word:(word_freq['male'].get(word,0)/word_counter['male'])/(word_freq['female'].get(word,0)/word_counter['female']+word_freq['male'].get(word,0)/word_counter['male']) for word in common_words}", 
     "language": "python", 
     "outputs": [], 
     "prompt_number": 40
    }, 
    {
     "cell_type": "markdown", 
     "source": "Finally, I print out the words that are disproporately found in the male and female subject\nsentences. For the 50 distincitve female and male words, I print the ratio of gendered %s along wit the\ncount of the number of male-subject and female-subject sentences that had the word. This script isn't \nparticularly pretty, but it gets the job done."
    }, 
    {
     "cell_type": "code", 
     "collapsed": false, 
     "input": "header ='Ratio\\tMale\\tFemale\\tWord'\nprint 'Male words'\nprint header\nfor word in sorted (male_percent,key=male_percent.get,reverse=True)[:50]:\n    try:\n        ratio=male_percent[word]/(1-male_percent[word])\n    except:\n        ratio=100\n    print '%.1f\\t%02d\\t%02d\\t%s' % (ratio,word_freq['male'].get(word,0),word_freq['female'].get(word,0),word)\n\nprint '\\n'*2\nprint 'Female words'\nprint header\nfor word in sorted (male_percent,key=male_percent.get,reverse=False)[:50]:\n    try:\n        ratio=(1-male_percent[word])/male_percent[word]\n    except:\n        ratio=100\n    print '%.1f\\t%02d\\t%02d\\t%s' % (ratio,word_freq['male'].get(word,0),word_freq['female'].get(word,0),word)", 
     "language": "python", 
     "outputs": [
      {
       "output_type": "stream", 
       "stream": "stdout", 
       "text": "Male words\nRatio\tMale\tFemale\tWord\n11.2\t72\t02\tprime\n10.8\t70\t02\tbaseball\n9.5\t92\t03\tofficial\n9.5\t61\t02\tcapital\n9.5\t61\t02\tgovernor\n5.8\t75\t04\tfans\n5.3\t120\t07\tminister\n5.3\t51\t03\tsequester\n5.2\t118\t07\tleague\n4.5\t58\t04\tfailed\n4.4\t57\t04\tcardinals\n4.2\t54\t04\tfinance\n4.0\t78\t06\treporters\n3.9\t50\t04\twinning\n3.8\t73\t06\tfinally\n3.6\t116\t10\tplayers\n3.5\t56\t05\tacknowledged\n3.5\t67\t06\taddress\n3.4\t66\t06\tattack\n3.3\t108\t10\topposition\n3.3\t54\t05\trest\n3.3\t53\t05\tcamp\n3.2\t52\t05\tcosts\n3.1\t91\t09\tgoal\n3.1\t50\t05\tcrowd\n3.0\t118\t12\tbank\n2.9\t57\t06\treferring\n2.9\t66\t07\tsports\n2.9\t56\t06\tsurgery\n2.9\t56\t06\tmissed\n2.8\t55\t06\tpressure\n2.8\t64\t07\tteammates\n2.8\t91\t10\teconomy\n2.8\t54\t06\trelease\n2.7\t123\t14\tpope\n2.7\t130\t15\tmeeting\n2.6\t84\t10\tvictory\n2.6\t58\t07\tveteran\n2.5\t226\t28\tpolitical\n2.5\t104\t13\tspending\n2.5\t64\t08\teffect\n2.5\t56\t07\tspend\n2.5\t72\t09\tcontinue\n2.5\t95\t12\tforeign\n2.4\t71\t09\tinjury\n2.4\t94\t12\telection\n2.4\t78\t10\trunning\n2.4\t116\t15\tmanager\n2.4\t54\t07\telected\n2.4\t99\t13\ttax\n\n\n\nFemale words\nRatio\tMale\tFemale\tWord\n100.0\t00\t29\tpregnant\n100.0\t00\t17\thusband's\n51.6\t01\t16\tsuffrage\n40.3\t02\t25\tbreast\n12.9\t04\t16\tgender\n11.8\t06\t22\tpregnancy\n6.8\t10\t21\tdresses\n5.7\t13\t23\tbirth\n5.5\t13\t22\tmemoir\n4.8\t25\t37\tbaby\n4.7\t17\t25\tdisease\n4.6\t14\t20\tinterviewed\n4.6\t12\t17\tabortion\n4.6\t24\t34\tdress\n4.5\t23\t32\tmarried\n4.3\t12\t16\tactivist\n4.3\t25\t33\tauthor\n4.1\t14\t18\tdrama\n3.9\t30\t36\thair\n3.8\t18\t21\trape\n3.6\t24\t27\tdog\n3.6\t19\t21\tnovel\n3.5\t99\t108\tchildren\n3.4\t16\t17\tstatue\n3.4\t17\t18\tvictim\n3.4\t51\t53\tcancer\n3.3\t41\t42\tviolence\n3.2\t32\t32\tyounger\n3.2\t20\t20\tfestival\n3.1\t34\t33\tstudy\n3.1\t30\t29\tteacher\n3.1\t27\t26\tsex\n3.1\t43\t41\tfashion\n3.1\t20\t19\topera\n3.0\t18\t17\tsinging\n3.0\t62\t57\tchild\n2.8\t23\t20\twear\n2.8\t30\t26\tnative\n2.6\t34\t27\tdance\n2.6\t29\t23\tgraduated\n2.5\t33\t26\twriter\n2.5\t23\t18\tfavor\n2.5\t41\t32\teyes\n2.5\t22\t17\tbecomes\n2.5\t47\t36\tkids\n2.5\t21\t16\teat\n2.4\t29\t22\tdomestic\n2.4\t29\t22\ttraditional\n2.4\t77\t58\tparents\n2.4\t32\t24\tdrug"
      }
     ], 
     "prompt_number": 44
    }, 
    {
     "cell_type": "markdown", 
     "source": "My interepretation of this: If your knowledge of men's and women's roles in society came just from\nreading last week's New York Times, you would think that men play sports and run the government. Women do\nfeminine and domestic things.  "
    }
   ]
  }
 ]
}